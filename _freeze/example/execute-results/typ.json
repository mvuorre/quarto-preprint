{
  "hash": "f8109ea0140dc9bf95d1a3e867c9a8c0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Example `preprint-typst` Document: Academic Writing with Quarto and Typst\"\nrunning-head: \"Quarto-Typst Example\"\nauthor:\n  - name: Matti Vuorre\n    email: mjvuorre@uvt.nl\n    orcid: 0000-0001-5052-066X\n    url: https://www.tilburguniversity.edu/staff/m-j-vuorre\n    corresponding: true\n    equal-contributor: true\n    affiliation:\n      - ref: 1\n  - name: Example Author\n    email: author@example.edu\n    orcid: 0000-0002-0000-0000\n    equal-contributor: true\n    affiliation:\n      - ref: 2\naffiliations:\n  - id: 1\n    name: Tilburg University\n    department: Department of Social Psychology\n  - id: 2\n    name: Example University\n    department: Department of Examples\nabstract: |\n  {{< lipsum 1 >}}\ncategories: [Quarto, Typst, example, academic writing]\nbibliography: bibliography.bib\ncsl: https://www.zotero.org/styles/apa\nauthornote: |\n  Created with Quarto 1.8.24 and *preprint-typst* 1.2.0 on 2025-09-29.\ntoc: true\ntoc-title: Contents\ndate: \"2025-09-29\"\nknitr:\n  opts_chunk:\n    echo: false\nformat:\n  preprint-typst:\n    wordcount: true\n    toc-depth: 1\n---\n\n> \"An article about computational science in a scientific publication is not the scholarship itself, it is merely advertising of the scholarship. The actual scholarship is the complete software development environment and the complete set of instructions which generated the figures.\"\n>--Buckheit and Donoho (1995, paraphrasing Jon Claerbout)\n\n# Introduction\n\n[Quarto](https://quarto.org/) is \"An open-source scientific and technical publishing system\" [@allaireQuarto2025] for writing reproducible documents that combine computations and prose written in [markdown](https://quarto.org/docs/authoring/markdown-basics.html) into HTML, PDF, Word, and other outputs. For many R users, Quarto is a successor of [R Markdown](https://rmarkdown.rstudio.com/) but with a broader scope and better support for different output formats and computational content in other languages.\n\n[*quarto-preprint*](https://github.com/mvuorre/quarto-preprint) is a Quarto extension that provides the ***preprint-typst*** output format. When using this format, Quarto renders your document into PDF using [Typst](https://typst.app/), a modern replacement for LaTeX. *preprint-typst* builds on the standard Quarto Typst template and enables separated author-affiliation formatting, additional metadata variables for scholarly writing, opinionated but customizable typesetting, improved two-column layouts (including full-width floats), appendices, and more. In addition, *preprint-typst* aims to\n\n- Be **fast**: Typst creates PDF files very quickly\n- **Just Work**: No LaTeX installation required (Typst ships with Quarto)\n- Be **100% Quarto compatible**: Switch between output formats without changing content\n- Have **rich features**: Separated author-affiliation formatting, two-column layouts, full-width floats, appendices\n\n# Example content\n\n## Code\n\nCode (@lst-code) font can be specified with the `monofont` variable.\n\n\n::: {.cell}\n\n```{#lst-code .r .cell-code  lst-cap=\"Creating a `data.frame` in R\"}\ndata <- data.frame(\n  Category = c(\"Type A\", \"Type B\", \"Type C\"),\n  Count = c(15, 23, 8),\n  Percentage = c(\"35%\", \"54%\", \"19%\")\n)\n```\n:::\n\n\n## Tables\n\n@tbl-example is a simple table. I recommend using the [tinytable](https://github.com/vincentarelbundock/tinytable) package for tables, but `knitr::kable()` works well for basic tables.\n\n\n::: {#tbl-example .cell tbl-cap='An example table.'}\n::: {.cell-output-display}\n\n```{=typst}\n#show figure: set block(breakable: true)\n\n#block[ // start block\n\n  #let style-dict = (\n    // tinytable style-dict after\n  )\n\n  #let style-array = ( \n    // tinytable cell style after\n  )\n\n  // Helper function to get cell style\n  #let get-style(x, y) = {\n    let key = str(y) + \"_\" + str(x)\n    if key in style-dict { style-array.at(style-dict.at(key)) } else { none }\n  }\n\n  // tinytable align-default-array before\n  #let align-default-array = ( left, left, left, ) // tinytable align-default-array here\n  #show table.cell: it => {\n    if style-array.len() == 0 { return it }\n    \n    let style = get-style(it.x, it.y)\n    if style == none { return it }\n    \n    let tmp = it\n    if (\"fontsize\" in style) { tmp = text(size: style.fontsize, tmp) }\n    if (\"color\" in style) { tmp = text(fill: style.color, tmp) }\n    if (\"indent\" in style) { tmp = pad(left: style.indent, tmp) }\n    if (\"underline\" in style) { tmp = underline(tmp) }\n    if (\"italic\" in style) { tmp = emph(tmp) }\n    if (\"bold\" in style) { tmp = strong(tmp) }\n    if (\"mono\" in style) { tmp = math.mono(tmp) }\n    if (\"strikeout\" in style) { tmp = strike(tmp) }\n    tmp\n  }\n\n  #align(center, [\n\n  #table( // tinytable table start\n    columns: (auto, auto, auto),\n    stroke: none,\n    rows: auto,\n    align: (x, y) => {\n      let style = get-style(x, y)\n      if style != none and \"align\" in style { style.align } else { left }\n    },\n    fill: (x, y) => {\n      let style = get-style(x, y)\n      if style != none and \"background\" in style { style.background }\n    },\n table.hline(y: 1, start: 0, end: 3, stroke: 0.05em + black),\n table.hline(y: 4, start: 0, end: 3, stroke: 0.1em + black),\n table.hline(y: 0, start: 0, end: 3, stroke: 0.1em + black),\n    // tinytable lines before\n\n    // tinytable header start\n    table.header(\n      repeat: true,\n[Category], [Count], [Percentage],\n    ),\n    // tinytable header end\n\n    // tinytable cell content after\n[Type A], [15], [35%],\n[Type B], [23], [54%],\n[Type C], [8], [19%],\n\n    // tinytable footer after\n\n  ) // end table\n\n  ]) // end align\n\n] // end block\n```\n\n:::\n:::\n\n\n## Figures\n\n@fig-example is an example table.\n\n::: {#fig-example fig-cap=\"Example figure.\"}\n{{< placeholder 400 200 format=svg >}}\n:::\n\n## Mathematical content\n\nLaTeX math is probably the safest option since it is displayed in other output formats, but also automatically converted to Typst by [pandoc](https://pandoc.org/). A regression equation is shown in @eq-regression\n\n$$\n\\mathbf{Y} = \\mathbf{X}\\boldsymbol{\\beta} + \\boldsymbol{\\epsilon}\n$$ {#eq-regression}\n\nWhere $\\mathbf{Y}$ is the response vector, $\\mathbf{X}$ is the design matrix, and $\\boldsymbol{\\beta}$ represents coefficients.\n\n## Full-Width Content\n\nIn two-column documents, you can create full-width content using the `place` function. @fig-wide spans the full page width.\n\n:::: {.place arguments='auto, scope: \"parent\", float: true'}\n::: {#fig-wide fig-cap=\"Example of full-width content spanning multiple columns\"}\n{{< placeholder 600 200 format=svg >}}\n:::\n::::\n\n# Discussion\n\n{{< lipsum 1 >}}\n\n# References\n\n::: {#refs}\n:::\n\n```{=typst}\n#show: appendix.with()\n```\n\n# Example Appendix {.appendix}\n\n{{< lipsum 1 >}}\n\n## Tables in Appendices {.appendix}\n\nAppendix cross-referenced content like @tbl-appendix, @fig-appendix, and @eq-appendix are numbered separately.\n\n\n::: {#tbl-appendix .cell tbl-cap='Example appendix table'}\n::: {.cell-output-display}\n\n```{=typst}\n#show figure: set block(breakable: true)\n\n#block[ // start block\n\n  #let style-dict = (\n    // tinytable style-dict after\n  )\n\n  #let style-array = ( \n    // tinytable cell style after\n  )\n\n  // Helper function to get cell style\n  #let get-style(x, y) = {\n    let key = str(y) + \"_\" + str(x)\n    if key in style-dict { style-array.at(style-dict.at(key)) } else { none }\n  }\n\n  // tinytable align-default-array before\n  #let align-default-array = ( left, left, ) // tinytable align-default-array here\n  #show table.cell: it => {\n    if style-array.len() == 0 { return it }\n    \n    let style = get-style(it.x, it.y)\n    if style == none { return it }\n    \n    let tmp = it\n    if (\"fontsize\" in style) { tmp = text(size: style.fontsize, tmp) }\n    if (\"color\" in style) { tmp = text(fill: style.color, tmp) }\n    if (\"indent\" in style) { tmp = pad(left: style.indent, tmp) }\n    if (\"underline\" in style) { tmp = underline(tmp) }\n    if (\"italic\" in style) { tmp = emph(tmp) }\n    if (\"bold\" in style) { tmp = strong(tmp) }\n    if (\"mono\" in style) { tmp = math.mono(tmp) }\n    if (\"strikeout\" in style) { tmp = strike(tmp) }\n    tmp\n  }\n\n  #align(center, [\n\n  #table( // tinytable table start\n    columns: (auto, auto),\n    stroke: none,\n    rows: auto,\n    align: (x, y) => {\n      let style = get-style(x, y)\n      if style != none and \"align\" in style { style.align } else { left }\n    },\n    fill: (x, y) => {\n      let style = get-style(x, y)\n      if style != none and \"background\" in style { style.background }\n    },\n table.hline(y: 1, start: 0, end: 2, stroke: 0.05em + black),\n table.hline(y: 4, start: 0, end: 2, stroke: 0.1em + black),\n table.hline(y: 0, start: 0, end: 2, stroke: 0.1em + black),\n    // tinytable lines before\n\n    // tinytable header start\n    table.header(\n      repeat: true,\n[Item], [Value],\n    ),\n    // tinytable header end\n\n    // tinytable cell content after\n[Alpha], [1.23],\n[Beta], [4.56],\n[Gamma], [7.89],\n\n    // tinytable footer after\n\n  ) // end table\n\n  ]) // end align\n\n] // end block\n```\n\n:::\n:::\n\n\n::: {#fig-appendix fig-cap=\"Example appendix figure\"}\n{{< placeholder 300 150 format=svg >}}\n:::\n\n$$\n\\hat{\\boldsymbol{\\beta}} = (\\mathbf{X}^T\\mathbf{X})^{-1}\\mathbf{X}^T\\mathbf{Y}\n$$ {#eq-appendix}\n\n# Second Appendix {.appendix}\n\nThis is a second appendix.\n\n{{< lipsum 1 >}}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}